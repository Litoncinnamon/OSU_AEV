//int steadyGoTo(int Position, int Sensitivity = 1, float TimeStep = 0.2f, int Speed = 2) {
//  int 
//    InitialSpeed = 20,
//    NewPosition, OldPosition = getVehiclePostion(),
//    BrakingDistance = 20; // 20 marks
//    
//  bool
//    Finished = false;
//  
//  if(NewPosition == Position) {
//    return 0;
//  }
//  // Speed assuming 10 marks/second should be 2 marks/.2 seconds
//  motorSpeed(4,InitialSpeed);
//  while(!Finished) {
//    goFor(TimeStep);
//
//    NewPosition = getVehiclePostion();
//
//    if(NewPosition >= (Position-BrakingDistance) || NewPosition <= (Position+BrakingDistance)) {
//      brake(4);
//      return 1;
//    }
//    
//    if(NewPosition-OldPosition < Speed && InitialSpeed < 30) { // Moving too slow
//      InitialSpeed += 1 * Sensitivity;
//    } 
//    else if(NewPosition-OldPosition > Speed) { // Moving too fast
//      InitialSpeed -= 2 * Sensitivity;
//    }
//    else if(NewPosition-OldPosition > Speed+3) { // AEV is flying
//      brake(4);
//    }
//
//    OldPosition = NewPosition;
//    motorSpeed(4,InitialSpeed);
//    
//  }
//}

void myCode()
{
  //----------------------------------------------------------------------------------------
  // myCode();
  //
  // This is the tab where the programming of your vehicle operation is done.
  // Tab _00_AEV_key_words contains a compiled list of functions/subroutines used for vehicle
  // operation. 
  //
  // Note:
  // (1) After running your AEV do not turn the AEV off, connect the AEV to a computer, or 
  //     push the reset button on the Arduino. There is a 13 second processing period. In 
  //     post processing, data is stored and battery recuperation takes place. 
  // (2) Time, current, voltage, total marks, position traveled are recorded approximately 
  //     every 60 milliseconds. This may vary depending on the vehicles operational tasks. 
  //     It takes approximately 35-40 milliseconds for each recording. Thus when programming,
  //     code complexity may not be beneficial. 
  // (3) Always comment your code. Debugging will be quicker and easier to do and will 
  //     especially aid the instructional team in helping you. 
  //---------------------------------------------------------------------------------------- 

  // Program between here-------------------------------------------------------------------
  /*
  celerate(1,0,15,2.5); // celerate (Motor1, StartSpeed=0, Endspeed=15%, Duration=2.5s)
  motorSpeed(1,15);     // Set (Motor1, 15% power)
  goFor(1);             // Continue running motor for 1s
  brake(1);             // Stop

  celerate(2,0,27,4);   // celerate (Motor2, StartSpeed=0, Endspeed=27%, Duration=4s)
  motorSpeed(2,27);     // Set (Motor2, 27% power)
  goFor(2.7);           // Continue running for 2.7s
  celerate(2,27,15,1);  // celerate (Motor2, Startspeed=27%, Endspeed=15%, Duration=1s)
  brake(2);             // Brake Motor2
  reverse(2);           // Reverse direction that Motor2 will spin in
  celerate(4,0,31,2);   // Accelerate all motors from 0 to 31% power over the duration of 2 seconds
  motorSpeed(4,35);     // Set all motors at 35% speed
  goFor(1);             // Cont.
  brake(2);             // Brake Motor2  
  motorSpeed(1,35);     // Set Motor1 at 35% speed
  goFor(3);             // Continue for 3 seconds
  brake(4);             // Brake all
  reverse(1);           // Reverse direction of Motor1
  celerate(1,0,19,2);   // Accelerate Motor1 from 0-19% over 2 seconds
  motorSpeed(2,35);     // Immediately set Motor2 to 35% speed (No gradual acceleration)
  goFor(2);             // Both motors will continue going for 2s
  motorSpeed(4,19);     // Set the speed of all motors to 19 immediately
  goFor(2);             // Continue for 2s
  celerate(4,19,0,3);   // Gradually decelerate all motors to 0
  brake(4);             // Brake all motors and end program.*/
  /*
   * -------------------------------------------------------------------
   * AEV Test Code, Version 1.0
   * Written February 2nd, 2022 by David Lowry, Drew Reed & Megan Smith
   * 
   * Des. A short program to test the AEV concept. The goal is, simply,
   * for the AEV to go up the track then come back to where it initially
   * started.
   * -------------------------------------------------------------------
   */

// PHASE 1: Uphill run, then stop at maintenance station.
    reverse(1);
    reverse(4);
    celerate(4,15,37,2);
    goToAbsolutePosition(123); 

    reverse(4);
    motorSpeed(4,51);
    goFor(0.8);
    
    brake(4);
    goFor(4);


// PHASE 2: Continue and stop before incline.  
    celerate(4,15,32,3);
    goFor(1.2);
    motorSpeed(4,12);
    goToAbsolutePosition(-112);
    brake(4);
    goFor(0.8);
    motorSpeed(4,22);
    goToAbsolutePosition(-260);
    brake(4);
    goFor(6); // Long brake allows for gradual, complete stop.


// PHASE 3: Continue uphill then stop.
    motorSpeed(4,48);
    goToRelativePosition(-137);
    //goToRelativePosition(-116);
    brake(4);
    goFor(0.1);
    reverse(4);
    motorSpeed(4,78);
    goFor(0.6); // Was 0.6
    brake(4);
    goFor(4);


// PHASE 4: Go downhill and pause on incline
    int offset = 0;
    motorSpeed(4,22);
    goToRelativePosition(50+offset); // Needs to go to 147 (or 100)
    motorSpeed(4,0);
    goToRelativePosition(20); // Coast
    brake(4);
    reverse(4);
    
    motorSpeed(4,39);
    goFor(5.5);
    brake(4);


// PHASE 5: Continue down and stop at maintanence station.
    reverse(4);
    motorSpeed(4,18);
    goToAbsolutePosition(-95); 
    brake(4);
    goFor(4); 


// PHASE 6: Go to Grand Canyon station and stop there.
    celerate(4,15,37,2);
    goToAbsolutePosition(135); 
    reverse(4);
    motorSpeed(4,51);
    goFor(0.8);
    
    brake(4);
    goFor(4);

// End of run.
    
    
    
    

  // And here--------------------------------------------------------------------------------

} // DO NOT REMOVE. end of void myCode()
